# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

"returned data after login"
type AuthData {
    "Email of the user"
    email: String
    "Name of the user"
    name: String
    "session id"
    session: String
    "access and refresh token"
    tokens: AuthTokens
    "Unique identifier from Database for the user"
    userId: ID
}

"access and refresh token"
type AuthTokens {
    """

    access token
    valid for 15 minutes
    """
    accessToken: String
    """

    refresh token
    valid for 30 days
    gets refreshed on every renewToken call
    """
    refreshToken: String
}

"Favourite Object"
type Favourite {
    "Unique identifier from Database for the favourite"
    _id: ID
    "latitude of the favourite"
    lat: Float
    "longitude of the favourite"
    lon: Float
    "Name of the favourite"
    name: String
}

type Log {
    "level"
    level: String
    "message"
    message: String
    "timestamp"
    timestamp: String
    "trace (sender of the log)"
    trace: String
}

type Mutation {
    """

    add a favourite to the current user
    returns the new favourite list
    """
    addFavourite(favourite: FavouriteInput!): [Favourite]
    """

    change user name
    returns true if name was changed
    """
    changeName(name: String!): Boolean
    """

    change password
    returns true if password was changed
    """
    changePassword(newPassword: String!, oldPassword: String!): Boolean
    "register a new user"
    createUser(user: UserInput!): User
    """

    remove a favourite from the current user
    returns the new favourite list
    """
    removeFavourite(id: ID!): [Favourite]
}

type Query {
    """

    forgot password
    returns true if email was sent
    returns also true if email was not found (security)
    """
    forgotPassword(email: String!): Boolean
    "getLogs"
    getLogs(
        "limit (default 20)"
        limit: Int,
        "offset/page (default 0)"
        offset: Int
    ): [Log]
    "Query weather data for a specific location"
    getWeatherData(
        "Latitude of the location"
        lat: Float!,
        "Longitude of the location"
        lon: Float!
    ): WeatherData
    login(email: String!, password: String!): AuthData
    """

    logout
    returns true if logout was successful
    """
    logout(session: String!): Boolean
    "returns a new accessToken and refreshes the refreshToken"
    renewToken(refreshToken: String!): AuthTokens
    "Say hello"
    sayHello(
        "Your name"
        name: String!
    ): String
    "get a list of all sessions"
    sessions: [Session]
    "get a single user"
    user(_id: ID!): User
    "get a list of all favourites of the current user"
    userFavourites: [Favourite]
    "get a list of all sessions of the current user"
    userSessions: [Session]
    "get a list of all users"
    users: [User]
}

"Session Object"
type Session {
    "Unique identifier from Database for the session"
    _id: ID
    "User of the session"
    user: User
    "valid until"
    validUntil: String
}

"Temperature, with units Celsius and Fahrenheit"
type Temperature {
    "Temperature. Unit Celsius"
    c: Float
    "Temperature. Unit Fahrenheit"
    f: Float
}

"Temperature data"
type TemperatureData {
    "Current temperature. Null if not the current day."
    cur: Temperature
    "Temperature. This temperature parameter accounts for the human perception of weather."
    feel: Temperature
    "Maximum temperature at the moment. This is deviation from current temp that is possible for large cities and megalopolises geographically expanded (use these parameter optionally)."
    max: Temperature
    "Minimum temperature at the moment. This is deviation from current temp that is possible for large cities and megalopolises geographically expanded (use these parameter optionally)."
    min: Temperature
}

"User Object"
type User {
    "Unique identifier from Database for the user"
    _id: ID
    "Email of the user"
    email: String!
    "Name of the user"
    name: String
    "Account verified"
    verified: Boolean
}

"Weather data for a specific location"
type WeatherData {
    "Clothing recommendation"
    clothing: String
    "Location name"
    name: String
    "Array of weather data"
    weather: [WeatherDataForecast]
}

"Weather data for a specific day"
type WeatherDataForecast {
    "Weather code"
    code: Int
    "Date of the forecast"
    date: String
    "Description of the weather"
    description: String
    "Weather Details"
    details: WeatherDetails
    "Weather icon"
    icon: String
    "Temperature data"
    temps: TemperatureData
    "Day of the week"
    weekday: Weekday
}

"Weather Details"
type WeatherDetails {
    "Humidity, %"
    humidity: Float
    "Rain volume for the last 3 hours"
    percipitation: Float
    "Atmospheric pressure on the sea level, hPa"
    pressure: Float
    "Visibility, meter"
    visibility: Float
    "Wind data"
    wind: Wind
}

"Day of the week"
type Weekday {
    "Day of the week in long format"
    long: String
    "Day of the week in short format"
    short: String
}

"Wind data"
type Wind {
    "Wind direction, degrees (meteorological)"
    deg: Int
    "Wind gust. Unit Default: meter/sec"
    gust: Float
    "Wind speed. Unit Default: meter/sec"
    speed: Float
}

"Favorite data needed to create a new favourite"
input FavouriteInput {
    "latitude of the favourite"
    lat: Float!
    "longitude of the favourite"
    lon: Float!
    "Name of the favourite"
    name: String!
}

"Userdata needed to create a new user"
input UserInput {
    "Email of the user"
    email: String!
    "Name of the user"
    name: String!
    """

    Password of the user
    Stored as a hash
    """
    password: String!
}
