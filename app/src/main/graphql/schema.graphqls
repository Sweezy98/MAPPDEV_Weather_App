# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

"returned data after login"
type AuthData {
    "Email of the user"
    email: String
    "Name of the user"
    name: String
    "session id"
    session: String
    "access and refresh token"
    tokens: AuthTokens
    "Unique identifier from Database for the user"
    userId: ID
}

"access and refresh token"
type AuthTokens {
    """

    access token
    valid for 15 minutes
    """
    accessToken: String
    """

    refresh token
    valid for 30 days
    gets refreshed on every renewToken call
    """
    refreshToken: String
}

"Clouds data"
type Clouds {
    "Cloudiness, %"
    all: Int
}

"City geo location"
type Coord {
    "City geo location, latitude"
    lat: Float
    "City geo location, longitude"
    lon: Float
}

"Favourite Object"
type Favourite {
    "Unique identifier from Database for the favourite"
    _id: ID
    "latitude of the favourite"
    lat: Float
    "longitude of the favourite"
    lon: Float
    "Name of the favourite"
    name: String
}

type Log {
    "level"
    level: String
    "message"
    message: String
    "timestamp"
    timestamp: String
    "trace (sender of the log)"
    trace: String
}

"Main Weather Information"
type Main {
    "Temperature. This temperature parameter accounts for the human perception of weather. Unit Default: Kelvin, Metric: Celsius, Imperial: Fahrenheit."
    feels_like: Float
    "Atmospheric pressure on the ground level, hPa"
    grnd_level: Int
    "Humidity, %"
    humidity: Int
    "Atmospheric pressure on the sea level, hPa"
    pressure: Int
    "Atmospheric pressure on the sea level, hPa"
    sea_level: Int
    "Temperature. Unit Default: Kelvin, Metric: Celsius, Imperial: Fahrenheit."
    temp: Float
    "Maximum temperature at the moment. This is deviation from current temp that is possible for large cities and megalopolises geographically expanded (use these parameter optionally). Unit Default: Kelvin, Metric: Celsius, Imperial: Fahrenheit."
    temp_max: Float
    "Minimum temperature at the moment. This is deviation from current temp that is possible for large cities and megalopolises geographically expanded (use these parameter optionally). Unit Default: Kelvin, Metric: Celsius, Imperial: Fahrenheit."
    temp_min: Float
}

type Mutation {
    """

    add a favourite to the current user
    returns the new favourite list
    """
    addFavourite(favourite: FavouriteInput!): [Favourite]
    """

    change user name
    returns true if name was changed
    """
    changeName(name: String!): Boolean
    """

    change password
    returns true if password was changed
    """
    changePassword(newPassword: String!, oldPassword: String!): Boolean
    "register a new user"
    createUser(user: UserInput!): User
    """

    remove a favourite from the current user
    returns the new favourite list
    """
    removeFavourite(id: ID!): [Favourite]
}

type Query {
    """

    forgot password
    returns true if email was sent
    returns also true if email was not found (security)
    """
    forgotPassword(email: String!): Boolean
    "getLogs"
    getLogs(
        "limit (default 20)"
        limit: Int,
        "offset/page (default 0)"
        offset: Int
    ): [Log]
    "Query weather data for a specific location"
    getWeatherData(
        "You can use this parameter to get the output in your language. (de, en etc.)"
        lang: String,
        "City geo location, latitude"
        lat: Float!,
        "City geo location, longitude"
        lon: Float!,
        "Units of measurement. standard, metric and imperial units are available. If you do not use the units parameter, standard units will be applied by default."
        units: String
    ): WeatherData
    login(email: String!, password: String!): AuthData
    """

    logout
    returns true if logout was successful
    """
    logout(session: String!): Boolean
    "returns a new accessToken and refreshes the refreshToken"
    renewToken(refreshToken: String!): AuthTokens
    "Say hello"
    sayHello(
        "Your name"
        name: String!
    ): String
    "get a list of all sessions"
    sessions: [Session]
    "get a single user"
    user(_id: ID!): User
    "get a list of all favourites of the current user"
    userFavourites: [Favourite]
    "get a list of all sessions of the current user"
    userSessions: [Session]
    "get a list of all users"
    users: [User]
}

"Rain data"
type Rain {
    "Rain volume for the last 1 hours"
    h1: Float
    "Rain volume for the last 3 hours"
    h3: Float
}

"Session Object"
type Session {
    "Unique identifier from Database for the session"
    _id: ID
    "User of the session"
    user: User
    "valid until"
    validUntil: String
}

"Snow data"
type Snow {
    "Snow volume for the last 1 hours"
    h1: Float
    "Snow volume for the last 3 hours"
    h3: Float
}

"System Parameters"
type Sys {
    "country code (AT, DE etc.)"
    country: String
    "Internal parameter"
    id: String
    "Internal parameter"
    message: String
    "Sunrise time, unix, UTC"
    sunrise: Int
    "Sunset time, unix, UTC"
    sunset: Int
    "Internal parameter"
    type: String
}

"User Object"
type User {
    "Unique identifier from Database for the user"
    _id: ID
    "Email of the user"
    email: String!
    "Name of the user"
    name: String
    "Account verified"
    verified: Boolean
}

"more info Weather condition codes"
type Weather {
    "Weather condition within the group. You can get the output in your language."
    description: String
    "Weather icon id"
    icon: String
    "Weather condition id"
    id: Int
    "Group of weather parameters (Rain, Snow, Extreme etc.)"
    main: String
}

"Weather data"
type WeatherData {
    "Internal parameter"
    base: String
    "Clouds data"
    clouds: Clouds
    "Internal parameter"
    cod: Int
    "City geo location"
    coord: Coord
    "Time of data calculation, unix, UTC"
    dt: Int
    "City ID. Please note that built-in geocoder functionality has been deprecated."
    id: Int
    "Main Weather Information"
    main: Main
    "City name. Please note that built-in geocoder functionality has been deprecated."
    name: String
    "Rain data"
    rain: Rain
    "Snow data"
    snow: Snow
    "System parameters"
    sys: Sys
    "Shift in seconds from UTC"
    timezone: Int
    "Visibility, meter"
    visibility: Int
    "More info Weather condition codes"
    weather: [Weather]
    "Wind data"
    wind: Wind
}

"Wind data"
type Wind {
    "Wind direction, degrees (meteorological)"
    deg: Int
    "Wind gust. Unit Default: meter/sec, Metric: meter/sec, Imperial: miles/hour."
    gust: Float
    "Wind speed. Unit Default: meter/sec, Metric: meter/sec, Imperial: miles/hour."
    speed: Float
}

"Favorite data needed to create a new favourite"
input FavouriteInput {
    "latitude of the favourite"
    lat: Float!
    "longitude of the favourite"
    lon: Float!
    "Name of the favourite"
    name: String!
}

"Userdata needed to create a new user"
input UserInput {
    "Email of the user"
    email: String!
    "Name of the user"
    name: String!
    """

    Password of the user
    Stored as a hash
    """
    password: String!
}
